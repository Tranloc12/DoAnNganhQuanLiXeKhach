import { useEffect, useState } from "react";
import { authApis, endpoints } from "../../configs/Apis";
import { Button, Table, Alert, Spinner, Form, Row, Col } from "react-bootstrap";
import { Link } from "react-router-dom";

const BusManagement = () => {
  const [buses, setBuses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // üÜï Th√™m tr·∫°ng th√°i cho c√°c b·ªô l·ªçc
  const [filters, setFilters] = useState({
    licensePlate: "",
    model: "",
    capacity: "",
    yearManufacture: "",
    status: "",
  });

  const fetchBuses = async () => {
    setLoading(true);
    setError(null);
    try {
      // üÜï T·∫°o URL v·ªõi c√°c tham s·ªë l·ªçc t·ª´ state
      const query = new URLSearchParams(filters).toString();
      let url = `${endpoints.buses}?${query}`;
      let res = await authApis().get(url);
      setBuses(res.data);
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch xe bu√Ωt:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch xe bu√Ωt.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchBuses();
  }, [filters]); // üÜï Khi filters thay ƒë·ªïi, g·ªçi l·∫°i API

  const deleteBus = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° xe bu√Ωt n√†y kh√¥ng?")) return;

    try {
      await authApis().delete(endpoints.deleteBus(id));
      setBuses(buses.filter((b) => b.id !== id));
    } catch (err) {
      console.error("‚ùå Xo√° th·∫•t b·∫°i:", err);
      alert("Xo√° xe bu√Ωt th·∫•t b·∫°i.");
    }
  };

  // üÜï H√†m x·ª≠ l√Ω thay ƒë·ªïi c·ªßa input
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prevFilters => ({
      ...prevFilters,
      [name]: value,
    }));
  };

  // üÜï H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t L·ªçc
  const handleFilterSubmit = (e) => {
    e.preventDefault();
    fetchBuses();
  };

  // üÜï H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t X√≥a b·ªô l·ªçc
  const handleClearFilters = () => {
    setFilters({
      licensePlate: "",
      model: "",
      capacity: "",
      yearManufacture: "",
      status: "",
    });
    // Do useEffect ƒë√£ l·∫Øng nghe, n√≥ s·∫Ω t·ª± ƒë·ªông g·ªçi fetchBuses khi filters thay ƒë·ªïi
  };

  return (
    <>
      <h1>Qu·∫£n l√Ω xe bu√Ωt</h1>
      {error && <Alert variant="danger">{error}</Alert>}
      <Link to="/manager/buses/add">
        <Button className="mb-3">Th√™m xe bu√Ωt</Button>
      </Link>
      
      {/* üÜï Form t√¨m ki·∫øm v√† l·ªçc */}
      <Form className="my-3" onSubmit={handleFilterSubmit}>
        <Row>
          <Col md={4} sm={6}>
            <Form.Group className="mb-3">
              <Form.Label>Bi·ªÉn s·ªë</Form.Label>
              <Form.Control
                type="text"
                placeholder="Nh·∫≠p bi·ªÉn s·ªë xe"
                name="licensePlate"
                value={filters.licensePlate}
                onChange={handleFilterChange}
              />
            </Form.Group>
          </Col>
          <Col md={4} sm={6}>
            <Form.Group className="mb-3">
              <Form.Label>Model</Form.Label>
              <Form.Control
                type="text"
                placeholder="Nh·∫≠p model"
                name="model"
                value={filters.model}
                onChange={handleFilterChange}
              />
            </Form.Group>
          </Col>
          <Col md={4} sm={6}>
            <Form.Group className="mb-3">
              <Form.Label>S·ªë gh·∫ø</Form.Label>
              <Form.Control
                type="number"
                placeholder="Nh·∫≠p s·ªë gh·∫ø"
                name="capacity"
                value={filters.capacity}
                onChange={handleFilterChange}
              />
            </Form.Group>
          </Col>
        </Row>
        <div className="d-flex justify-content-end">
            <Button variant="secondary" onClick={handleClearFilters} className="me-2">
                X√≥a b·ªô l·ªçc
            </Button>
            <Button variant="primary" type="submit">
                L·ªçc
            </Button>
        </div>
      </Form>

      {loading ? (
        <div className="text-center my-4">
          <Spinner animation="border" variant="primary" />
          <p className="text-muted mt-2">ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      ) : (
        <Table striped bordered hover responsive>
          <thead>
            <tr>
              <th>ID</th>
              <th>Bi·ªÉn s·ªë</th>
              <th>Model</th>
              <th>S·ªë gh·∫ø</th>
              <th>NƒÉm SX</th>
              <th>Tr·∫°ng th√°i</th>
              <th>M√¥ t·∫£</th>
              <th>K√≠ch ho·∫°t</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {buses.map((bus) => (
              <tr key={bus.id}>
                <td>{bus.id}</td>
                <td>{bus.licensePlate}</td>
                <td>{bus.model}</td>
                <td>{bus.capacity}</td>
                <td>{bus.yearManufacture}</td>
                <td>{bus.status}</td>
                <td>{bus.description}</td>
                <td>{bus.isActive ? "‚úÖ" : "‚ùå"}</td>
                <td>
                  <Link to={`/manager/buses/edit/${bus.id}`}>
                    <Button variant="warning" size="sm" className="me-2">
                      S·ª≠a
                    </Button>
                  </Link>
                  <Button
                    variant="danger"
                    size="sm"
                    onClick={() => deleteBus(bus.id)}
                  >
                    Xo√°
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}
    </>
  );
};

export default BusManagement;