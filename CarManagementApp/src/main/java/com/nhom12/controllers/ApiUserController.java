package com.nhom12.controllers;

import com.nhom12.dto.UserDetailDto;
import com.nhom12.dto.UserForm; // Make sure UserForm has an 'id' field for updates
import com.nhom12.pojo.PassengerInfo;
import com.nhom12.pojo.User;
import com.nhom12.services.CloudinaryService;
import com.nhom12.services.PassengerInfoService;
import com.nhom12.services.UserService;
import com.nhom12.utils.JwtUtils;
import jakarta.validation.Valid;
import java.io.IOException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.security.Principal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "*")
public class ApiUserController {

    @Autowired
    private UserService userService;

    @Autowired
    private PassengerInfoService passengerInfoService;

    @Autowired
    private CloudinaryService cloudinaryService;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    private JwtUtils jwtUtils = new JwtUtils();

    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody UserForm userForm) {
        try {
            if (userService.getUserByUsername(userForm.getUsername()) != null) {
                return ResponseEntity.status(HttpStatus.CONFLICT)
                        .body(Map.of("error", "Username already exists"));
            }

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            User user = new User();
            user.setUsername(userForm.getUsername());
            user.setPassword(passwordEncoder.encode(userForm.getPassword()));
            user.setEmail(userForm.getEmail());
            user.setDob(sdf.parse(userForm.getDob()));
            user.setUserRole(userForm.getUserRole()); // ROLE_DRIVER, ROLE_PASSENGER, ROLE_STAFF
            user.setIsActive(true);

            userService.saveUser(user);

            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(Map.of("message", "ƒêƒÉng k√Ω th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", e.getMessage()));
        }
    }

    // üìå ƒêƒÉng nh·∫≠p
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> loginRequest) {
        try {
            String username = loginRequest.get("username");
            String password = loginRequest.get("password");

            User user = userService.getUserByUsername(username);
            if (user == null || !passwordEncoder.matches(password, user.getPassword())) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(Map.of("error", "Sai th√¥ng tin ƒëƒÉng nh·∫≠p"));
            }

            String token = jwtUtils.generateToken(username);
            return ResponseEntity.ok(Map.of("token", token));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "L·ªói h·ªá th·ªëng"));
        }
    }

    // üìå L·∫•y user ƒëang ƒëƒÉng nh·∫≠p
    // üìå L·∫•y th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    @GetMapping("/current-user")
    public ResponseEntity<UserDetailDto> getCurrentUser(Principal principal) {
        if (principal == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        User user = userService.getUserByUsername(principal.getName());
        if (user == null) {
            return ResponseEntity.notFound().build();
        }

        PassengerInfo passengerInfo = passengerInfoService.findByUser(user);
        UserDetailDto userDetails = new UserDetailDto(user, passengerInfo);

        return ResponseEntity.ok(userDetails);
    }

    @PatchMapping("/current-user")
    public ResponseEntity<?> updateUser(Principal principal, @RequestBody Map<String, String> params) {
        try {
            User currentUser = userService.getUserByUsername(principal.getName());
            if (currentUser == null) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));
            }

            // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng User
            if (params.containsKey("email")) {
                currentUser.setEmail(params.get("email"));
            }

            // ‚≠ê ƒêI·ªÄU CH·ªàNH: X·ª≠ l√Ω ngo·∫°i l·ªá ParseException
            if (params.containsKey("dob") && !params.get("dob").isEmpty()) {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    currentUser.setDob(sdf.parse(params.get("dob")));
                } catch (ParseException e) {
                    return ResponseEntity.badRequest().body(Map.of("error", "ƒê·ªãnh d·∫°ng ng√†y sinh kh√¥ng h·ª£p l·ªá."));
                }
            }
            userService.updateUser(currentUser);

            // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng PassengerInfo
            PassengerInfo passengerInfo = passengerInfoService.findByUser(currentUser);
            if (passengerInfo != null) {
                // ‚≠ê ƒêI·ªÄU CH·ªàNH: Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c·∫£ hai tr∆∞·ªùng
                if (params.containsKey("firstName") && params.containsKey("lastName")) {
                    String newFullName = params.get("firstName") + " " + params.get("lastName");
                    passengerInfo.setFullName(newFullName);
                }

                if (params.containsKey("phone")) {
                    passengerInfo.setPhoneNumber(params.get("phone"));
                }
                if (params.containsKey("address")) {
                    passengerInfo.setAddress(params.get("address"));
                }

                passengerInfoService.addOrUpdatePassengerInfo(passengerInfo);
            }

            UserDetailDto updatedDetails = new UserDetailDto(currentUser, passengerInfo);
            return ResponseEntity.ok(updatedDetails);

        } catch (Exception e) {
            System.err.println("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "L·ªói c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i."));
        }
    }

    // üìå C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng
    @PatchMapping("/change-password")
    public ResponseEntity<?> changePassword(Principal principal, @RequestBody Map<String, String> passwords) {
        if (principal == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán ch·ª©c nƒÉng n√†y."));
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈© v√† m·∫≠t kh·∫©u m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
        String oldPassword = passwords.get("oldPassword");
        String newPassword = passwords.get("newPassword");

        if (oldPassword == null || oldPassword.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("error", "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈©."));
        }

        if (newPassword == null || newPassword.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("error", "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi."));
        }

        try {
            User user = userService.getUserByUsername(principal.getName());
            if (user == null) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."));
            }

            if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
                return ResponseEntity.badRequest().body(Map.of("error", "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng."));
            }

            user.setPassword(passwordEncoder.encode(newPassword));
            userService.updateUser(user);

            return ResponseEntity.ok(Map.of("message", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng."));
        } catch (Exception e) {
            // Log l·ªói chi ti·∫øt ƒë·ªÉ d·ªÖ d√†ng g·ª° l·ªói tr√™n server
            System.err.println("L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau."));
        }
    }

    @PostMapping(value = "/upload-avatar", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> uploadAvatar(
            @RequestParam("file") MultipartFile file,
            Principal principal) {

        System.out.println("File: " + (file != null ? file.getOriginalFilename() : "null"));
        System.out.println("Size: " + (file != null ? file.getSize() : 0));

        if (file == null || file.isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("error", "File kh√¥ng h·ª£p l·ªá"));
        }

        try {
            User currentUser = userService.getUserByUsername(principal.getName());
            if (currentUser == null) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."));
            }

            // 3. T·∫£i ·∫£nh l√™n Cloudinary
            // ‚≠ê THAY ƒê·ªîI T·∫†I ƒê√ÇY: Truy·ªÅn th√™m ID ng∆∞·ªùi d√πng v√†o service
            String avatarUrl = cloudinaryService.uploadFile(file, currentUser.getUsername()); // S·ª¨ D·ª§NG USERNAME L√ÄM ID DUY NH·∫§T

            // 4. C·∫≠p nh·∫≠t URL ·∫£nh ƒë·∫°i di·ªán v√†o ƒë·ªëi t∆∞·ª£ng User
            currentUser.setAvatar(avatarUrl);
            userService.updateUser(currentUser);

            return ResponseEntity.ok(Map.of("message", "T·∫£i ·∫£nh l√™n v√† c·∫≠p nh·∫≠t th√†nh c√¥ng.", "url", avatarUrl));

        } catch (IOException e) {
            System.err.println("L·ªói khi t·∫£i ·∫£nh l√™n: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("error", "L·ªói khi t·∫£i ·∫£nh l√™n."));
        }
    }

    // üìå L·∫•y danh s√°ch theo role
    @GetMapping("/passengers")
    public List<User> getPassengers() {
        return userService.getUsersByRole("ROLE_PASSENGER");
    }

    @GetMapping("/staff")
    public List<User> getStaff() {
        return userService.getUsersByRole("ROLE_STAFF");
    }

    @PostMapping("/users")
    public ResponseEntity<?> createUser(
            @RequestBody @Valid UserForm userForm,
            Principal principal
    ) {
        // ‚úÖ Ki·ªÉm tra quy·ªÅn ADMIN
        User adminUser = userService.getUserByUsername(principal.getName());
        if (adminUser == null
                || (!"ROLE_ADMIN".equals(adminUser.getUserRole()) && !"ROLE_MANAGER".equals(adminUser.getUserRole()))) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(Map.of("error", "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y"));
        }

        // ‚úÖ Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (userService.getUserByUsername(userForm.getUsername()) != null) {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body(Map.of("error", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i"));
        }

        // ‚úÖ Parse ng√†y sinh
        Date dob;
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            dob = sdf.parse(userForm.getDob());
        } catch (ParseException e) {
            return ResponseEntity.badRequest()
                    .body(Map.of("error", "ƒê·ªãnh d·∫°ng ng√†y sinh kh√¥ng h·ª£p l·ªá (yyyy-MM-dd)"));
        }

        // ‚úÖ T·∫°o ƒë·ªëi t∆∞·ª£ng User m·ªõi
        User newUser = new User();
        newUser.setUsername(userForm.getUsername());
        newUser.setPassword(passwordEncoder.encode(userForm.getPassword()));
        newUser.setEmail(userForm.getEmail());
        newUser.setDob(dob);
        newUser.setUserRole(userForm.getUserRole());
        newUser.setIsActive(true);

        userService.saveUser(newUser);

        return ResponseEntity.status(HttpStatus.CREATED)
                .body(Map.of("message", "Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng"));
    }

    @PostMapping("/users/save-fcm-token")
    public ResponseEntity<String> saveFcmToken(@RequestBody Map<String, String> payload) {
        String fcmToken = payload.get("token");

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ Spring Security Context
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || authentication.getPrincipal().equals("anonymousUser")) {
            return new ResponseEntity<>("Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c.", HttpStatus.UNAUTHORIZED);
        }

        // ‚ö° L·∫•y username tr·ª±c ti·∫øp t·ª´ authentication
        String username = authentication.getName();
        User currentUser = userService.getUserByUsername(username);

        if (currentUser != null) {
            currentUser.setFcmToken(fcmToken);
            userService.updateUser(currentUser);
            return new ResponseEntity<>("FCM Token ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!", HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.", HttpStatus.NOT_FOUND);
        }
    }

}
