import React, { useState, useContext, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { authApis, endpoints } from '../../configs/Apis';
import { Form, Button, Alert, Container, Spinner, Card, Row, Col } from 'react-bootstrap';
import { MyUserContext } from '../../contexts/Contexts'; // Import user context ƒë·ªÉ ki·ªÉm tra ƒëƒÉng nh·∫≠p

const AddReviewForm = () => {
    const { tripId } = useParams();
    const navigate = useNavigate();
    const user = useContext(MyUserContext); // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng

    // States cho c√°c ti√™u ch√≠ ƒë√°nh gi√°
    const [overallRating, setOverallRating] = useState(''); // T·ªïng quan
    const [driverRating, setDriverRating] = useState('');    // Ch·∫•t l∆∞·ª£ng t√†i x·∫ø
    const [busComfortRating, setBusComfortRating] = useState(''); // S·ª± tho·∫£i m√°i c·ªßa xe
    const [punctualityRating, setPunctualityRating] = useState(''); // ƒê√∫ng gi·ªù
    const [customerServiceRating, setCustomerServiceRating] = useState(''); // D·ªãch v·ª• kh√°ch h√†ng

    const [comment, setComment] = useState('');
    const [error, setError] = useState(null);
    const [success, setSuccess] = useState(null);
    const [loading, setLoading] = useState(false);
    const [showForm, setShowForm] = useState(false); // State ƒë·ªÉ ki·ªÉm so√°t vi·ªác hi·ªÉn th·ªã form

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
    useEffect(() => {
        if (!user) {
            // Kh√¥ng d√πng alert() theo h∆∞·ªõng d·∫´n. S·ª≠ d·ª•ng modal ho·∫∑c th√¥ng b√°o tr√™n UI.
            // ƒê·ªÉ ƒë∆°n gi·∫£n, m√¨nh s·∫Ω cho ph√©p hi·ªÉn th·ªã th√¥ng b√°o l·ªói ngay tr√™n form.
            // setGlobalAlert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m ƒë√°nh gi√°."); // N·∫øu c√≥ global alert system
            setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m ƒë√°nh gi√°.");
            // Chuy·ªÉn h∆∞·ªõng sau m·ªôt kho·∫£ng th·ªùi gian ƒë·ªÉ ng∆∞·ªùi d√πng k·ªãp ƒë·ªçc
            setTimeout(() => navigate('/login'), 2000); 
        }
    }, [user, navigate]);

    const validateRating = (ratingValue) => {
        return ratingValue !== '' && parseInt(ratingValue) >= 1 && parseInt(ratingValue) <= 5;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError(null);
        setSuccess(null);

        // Ki·ªÉm tra validation cho t·∫•t c·∫£ c√°c tr∆∞·ªùng rating
        if (!validateRating(overallRating) ||
            !validateRating(driverRating) ||
            !validateRating(busComfortRating) ||
            !validateRating(punctualityRating) ||
            !validateRating(customerServiceRating)) {
            setError("Vui l√≤ng ch·ªçn s·ªë sao ƒë√°nh gi√° (t·ª´ 1 ƒë·∫øn 5) cho t·∫•t c·∫£ c√°c ti√™u ch√≠.");
            setLoading(false);
            return;
        }

        if (!comment.trim()) {
            setError("B√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            setLoading(false);
            return;
        }

        // T·∫°o payload v·ªõi c√°c ƒë√°nh gi√° chi ti·∫øt
        const payload = {
            rating: parseInt(overallRating), // Gi·ªØ 'rating' t·ªïng quan cho API hi·ªán t·∫°i
            comment: comment.trim(),
            // Th√™m c√°c ƒë√°nh gi√° chi ti·∫øt
            driverRating: parseInt(driverRating),
            busComfortRating: parseInt(busComfortRating),
            punctualityRating: parseInt(punctualityRating),
            customerServiceRating: parseInt(customerServiceRating),
        };

        try {
            await authApis().post(endpoints.addReview(tripId), payload);
            setSuccess("‚úÖ ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
            // Reset form sau khi g·ª≠i th√†nh c√¥ng
            setOverallRating('');
            setDriverRating('');
            setBusComfortRating('');
            setPunctualityRating('');
            setCustomerServiceRating('');
            setComment('');
            // T·ª± ƒë·ªông chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch reviews sau m·ªôt th·ªùi gian
            setTimeout(() => navigate(`/trips/${tripId}/reviews`), 1500);
        } catch (err) {
            console.error("‚ùå L·ªói khi g·ª≠i review:", err);
            if (err.response?.status === 401) {
                setError("üî¥ B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°.");
                setTimeout(() => navigate('/login'), 2000); 
            } else if (err.response?.data?.message) {
                setError(`üî¥ L·ªói: ${err.response.data.message}`);
            } else {
                setError("üî¥ C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°.");
            }
        } finally {
            setLoading(false);
        }
    };

    if (!user) {
        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã th√¥ng b√°o v√† ch·ªù useEffect chuy·ªÉn h∆∞·ªõng
        return (
            <Container className="text-center my-5">
                <Alert variant="warning">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m ƒë√°nh gi√°.</Alert>
                <Spinner animation="border" /> ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p...
            </Container>
        );
    }

    return (
        <Container className="add-review-form mt-4 p-4 border rounded shadow-sm" style={{ maxWidth: '700px' }}>
                <Card className="shadow-lg p-4">
                    <Card.Body>
                        <h4 className="text-center mb-4 text-primary">Vi·∫øt ƒë√°nh gi√° cho chuy·∫øn ƒëi #{tripId}</h4>
                        {success && <Alert variant="success">{success}</Alert>}
                        {error && <Alert variant="danger">{error}</Alert>}
                        
                        <Form onSubmit={handleSubmit}>
                            <Row>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="overallRating">
                                        <Form.Label>ƒê√°nh gi√° t·ªïng quan:</Form.Label>
                                        <Form.Select 
                                            value={overallRating} 
                                            onChange={(e) => setOverallRating(e.target.value)} 
                                            required
                                        >
                                            <option value="">-- Ch·ªçn s·ªë sao --</option>
                                            {[1, 2, 3, 4, 5].map(num => (
                                                <option key={`overall-${num}`} value={num}>{num} sao {Array(num).fill('‚≠ê').join('')}</option>
                                            ))}
                                        </Form.Select>
                                    </Form.Group>
                                </Col>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="driverRating">
                                        <Form.Label>Ch·∫•t l∆∞·ª£ng t√†i x·∫ø:</Form.Label>
                                        <Form.Select 
                                            value={driverRating} 
                                            onChange={(e) => setDriverRating(e.target.value)} 
                                            required
                                        >
                                            <option value="">-- Ch·ªçn s·ªë sao --</option>
                                            {[1, 2, 3, 4, 5].map(num => (
                                                <option key={`driver-${num}`} value={num}>{num} sao {Array(num).fill('‚≠ê').join('')}</option>
                                            ))}
                                        </Form.Select>
                                    </Form.Group>
                                </Col>
                            </Row>

                            <Row>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="busComfortRating">
                                        <Form.Label>S·ª± tho·∫£i m√°i c·ªßa xe:</Form.Label>
                                        <Form.Select 
                                            value={busComfortRating} 
                                            onChange={(e) => setBusComfortRating(e.target.value)} 
                                            required
                                        >
                                            <option value="">-- Ch·ªçn s·ªë sao --</option>
                                            {[1, 2, 3, 4, 5].map(num => (
                                                <option key={`bus-${num}`} value={num}>{num} sao {Array(num).fill('‚≠ê').join('')}</option>
                                            ))}
                                        </Form.Select>
                                    </Form.Group>
                                </Col>
                                <Col md={6}>
                                    <Form.Group className="mb-3" controlId="punctualityRating">
                                        <Form.Label>ƒê√∫ng gi·ªù:</Form.Label>
                                        <Form.Select 
                                            value={punctualityRating} 
                                            onChange={(e) => setPunctualityRating(e.target.value)} 
                                            required
                                        >
                                            <option value="">-- Ch·ªçn s·ªë sao --</option>
                                            {[1, 2, 3, 4, 5].map(num => (
                                                <option key={`punctuality-${num}`} value={num}>{num} sao {Array(num).fill('‚≠ê').join('')}</option>
                                            ))}
                                        </Form.Select>
                                    </Form.Group>
                                </Col>
                            </Row>

                            <Form.Group className="mb-3" controlId="customerServiceRating">
                                <Form.Label>D·ªãch v·ª• kh√°ch h√†ng:</Form.Label>
                                <Form.Select 
                                    value={customerServiceRating} 
                                    onChange={(e) => setCustomerServiceRating(e.target.value)} 
                                    required
                                >
                                    <option value="">-- Ch·ªçn s·ªë sao --</option>
                                    {[1, 2, 3, 4, 5].map(num => (
                                        <option key={`service-${num}`} value={num}>{num} sao {Array(num).fill('‚≠ê').join('')}</option>
                                    ))}
                                </Form.Select>
                            </Form.Group>

                            <Form.Group className="mb-3" controlId="comment">
                                <Form.Label>B√¨nh lu·∫≠n chi ti·∫øt:</Form.Label>
                                <Form.Control
                                    as="textarea"
                                    rows={4}
                                    value={comment}
                                    onChange={(e) => setComment(e.target.value)}
                                    placeholder="Chia s·∫ª th√™m v·ªÅ tr·∫£i nghi·ªám c·ªßa b·∫°n (v√≠ d·ª•: th√°i ƒë·ªô t√†i x·∫ø, ti·ªán nghi xe, s·ª± c·ªë,...)"
                                    required
                                />
                            </Form.Group>

                            <div className="d-flex justify-content-end gap-2">
                                <Button variant="secondary" onClick={() => navigate(`/trips/${tripId}/reviews`)} disabled={loading}>
                                    H·ªßy
                                </Button>
                                <Button variant="primary" type="submit" disabled={loading}>
                                    {loading ? <Spinner as="span" animation="border" size="sm" className="me-2" /> : 'G·ª≠i ƒë√°nh gi√°'}
                                </Button>
                            </div>
                        </Form>
                    </Card.Body>
                </Card>
          
        </Container>
    );
};

export default AddReviewForm;
